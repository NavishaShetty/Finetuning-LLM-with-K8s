apiVersion: v1
kind: ConfigMap
metadata:
  name: llm-ui-html
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>TinyLlama Base - Chat Interface</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Inter', sans-serif;
                background: linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
            }
            .container {
                background: #ffffff;
                border-radius: 24px;
                box-shadow: 0 25px 80px rgba(0,0,0,0.4);
                max-width: 900px;
                width: 100%;
                overflow: hidden;
                border: 1px solid rgba(255,255,255,0.1);
            }
            .header {
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                color: white;
                padding: 40px 30px;
                text-align: center;
                position: relative;
                overflow: hidden;
            }
            .header::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
                animation: pulse 8s ease-in-out infinite;
            }
            @keyframes pulse {
                0%, 100% { transform: scale(1); opacity: 0.5; }
                50% { transform: scale(1.1); opacity: 0.8; }
            }
            .logo-container {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 15px;
                margin-bottom: 15px;
                position: relative;
                z-index: 1;
            }
            .logo {
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                border-radius: 16px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 32px;
                box-shadow: 0 8px 20px rgba(79, 172, 254, 0.4);
                animation: float 3s ease-in-out infinite;
            }
            @keyframes float {
                0%, 100% { transform: translateY(0px); }
                50% { transform: translateY(-10px); }
            }
            .header h1 {
                font-size: 32px;
                font-weight: 700;
                margin-bottom: 8px;
                position: relative;
                z-index: 1;
                letter-spacing: -0.5px;
            }
            .header p {
                opacity: 0.95;
                font-size: 15px;
                font-weight: 400;
                position: relative;
                z-index: 1;
            }
            .badge {
                display: inline-block;
                background: rgba(255,255,255,0.25);
                backdrop-filter: blur(10px);
                padding: 6px 18px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: 600;
                margin-top: 12px;
                border: 1px solid rgba(255,255,255,0.3);
                position: relative;
                z-index: 1;
            }
            .chat-container {
                height: 500px;
                overflow-y: auto;
                padding: 30px;
                background: linear-gradient(to bottom, #f8f9fa 0%, #e9ecef 100%);
            }
            .chat-container::-webkit-scrollbar {
                width: 8px;
            }
            .chat-container::-webkit-scrollbar-track {
                background: #f1f1f1;
            }
            .chat-container::-webkit-scrollbar-thumb {
                background: #2a5298;
                border-radius: 4px;
            }
            .message {
                margin-bottom: 20px;
                display: flex;
                align-items: flex-start;
                animation: messageSlide 0.3s ease-out;
            }
            @keyframes messageSlide {
                from {
                    opacity: 0;
                    transform: translateY(10px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            .message.user {
                flex-direction: row-reverse;
            }
            .avatar {
                width: 36px;
                height: 36px;
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 18px;
                flex-shrink: 0;
            }
            .message.user .avatar {
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                margin-left: 12px;
            }
            .message.bot .avatar {
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                margin-right: 12px;
            }
            .message-content {
                max-width: 70%;
                padding: 16px 20px;
                border-radius: 18px;
                line-height: 1.6;
                font-size: 15px;
            }
            .message.user .message-content {
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                color: white;
                border-bottom-right-radius: 4px;
                box-shadow: 0 4px 12px rgba(30, 60, 114, 0.3);
            }
            .message.bot .message-content {
                background: white;
                color: #2d3748;
                border-bottom-left-radius: 4px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.08);
                border: 1px solid rgba(0,0,0,0.06);
            }
            .typing-indicator {
                display: flex;
                align-items: center;
                gap: 8px;
                padding: 16px 20px;
                background: white;
                border-radius: 18px;
                border-bottom-left-radius: 4px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.08);
                width: fit-content;
            }
            .typing-dot {
                width: 8px;
                height: 8px;
                background: #2a5298;
                border-radius: 50%;
                animation: typingBounce 1.4s infinite;
            }
            .typing-dot:nth-child(2) {
                animation-delay: 0.2s;
            }
            .typing-dot:nth-child(3) {
                animation-delay: 0.4s;
            }
            @keyframes typingBounce {
                0%, 60%, 100% { transform: translateY(0); }
                30% { transform: translateY(-10px); }
            }
            .input-container {
                padding: 30px;
                background: white;
                border-top: 1px solid #e2e8f0;
            }
            .quick-prompts {
                display: flex;
                gap: 8px;
                margin-bottom: 16px;
                flex-wrap: wrap;
            }
            .quick-prompt {
                padding: 8px 16px;
                background: #f8f9fa;
                border: 1px solid #e2e8f0;
                border-radius: 20px;
                font-size: 13px;
                cursor: pointer;
                transition: all 0.2s;
                color: #2d3748;
            }
            .quick-prompt:hover {
                background: #2a5298;
                color: white;
                border-color: #2a5298;
                transform: translateY(-2px);
            }
            .input-row {
                display: flex;
                gap: 12px;
                margin-bottom: 18px;
            }
            #promptInput {
                flex: 1;
                padding: 16px 20px;
                border: 2px solid #e2e8f0;
                border-radius: 14px;
                font-size: 15px;
                transition: all 0.3s;
                font-family: inherit;
            }
            #promptInput:focus {
                outline: none;
                border-color: #2a5298;
                box-shadow: 0 0 0 3px rgba(42, 82, 152, 0.1);
            }
            #promptInput::placeholder {
                color: #a0aec0;
            }
            button {
                padding: 16px 32px;
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                color: white;
                border: none;
                border-radius: 14px;
                font-size: 15px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s;
                box-shadow: 0 4px 12px rgba(30, 60, 114, 0.3);
            }
            button:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(30, 60, 114, 0.4);
            }
            button:active {
                transform: translateY(0);
            }
            button:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }
            .controls {
                display: flex;
                gap: 20px;
                margin-bottom: 18px;
            }
            .control-group {
                flex: 1;
            }
            label {
                display: block;
                font-size: 13px;
                color: #4a5568;
                margin-bottom: 8px;
                font-weight: 600;
            }
            input[type="range"] {
                width: 100%;
                height: 6px;
                border-radius: 3px;
                background: #e2e8f0;
                outline: none;
                -webkit-appearance: none;
            }
            input[type="range"]::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 18px;
                height: 18px;
                border-radius: 50%;
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                cursor: pointer;
                box-shadow: 0 2px 6px rgba(30, 60, 114, 0.4);
            }
            input[type="range"]::-moz-range-thumb {
                width: 18px;
                height: 18px;
                border-radius: 50%;
                background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                cursor: pointer;
                border: none;
                box-shadow: 0 2px 6px rgba(30, 60, 114, 0.4);
            }
            .status {
                font-size: 13px;
                color: #718096;
                text-align: center;
                padding: 12px;
                border-radius: 8px;
                font-weight: 500;
            }
            .status.success { 
                color: #38a169;
                background: #f0fff4;
            }
            .status.error { 
                color: #e53e3e;
                background: #fff5f5;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="logo-container">
                    <div class="logo">🦙</div>
                </div>
                <h1>TinyLlama Chat Interface</h1>
            </div>
            
            <div class="chat-container" id="chatContainer">
                <div class="message bot">
                    <div class="avatar">🦙</div>
                    <div class="message-content">
                        Hello! I'm the base TinyLlama model. What would you like to talk about?
                    </div>
                </div>
            </div>
            
            <div class="input-container">
                <div class="quick-prompts">
                    <div class="quick-prompt" onclick="useQuickPrompt('Tell me a fun fact about llamas')">🦙 Fun fact</div>
                    <div class="quick-prompt" onclick="useQuickPrompt('Write a short poem about nature')">✍️ Write poem</div>
                    <div class="quick-prompt" onclick="useQuickPrompt('Explain quantum computing simply')">🔬 Explain topic</div>
                    <div class="quick-prompt" onclick="useQuickPrompt('Suggest a healthy recipe')">🍽️ Recipe idea</div>
                </div>
                
                <div class="controls">
                    <div class="control-group">
                        <label for="maxLength">Response Length: <span id="maxLengthValue">100</span> tokens</label>
                        <input type="range" id="maxLength" min="50" max="500" value="100">
                    </div>
                    <div class="control-group">
                        <label for="temperature">Creativity: <span id="temperatureValue">0.7</span></label>
                        <input type="range" id="temperature" min="0" max="1" step="0.1" value="0.7">
                    </div>
                </div>
                
                <div class="input-row">
                    <input 
                        type="text" 
                        id="promptInput" 
                        placeholder="Ask me anything..."
                        onkeypress="if(event.key==='Enter') sendMessage()"
                    >
                    <button onclick="sendMessage()" id="sendBtn">Send</button>
                </div>
                
                <div class="status" id="status">Connecting...</div>
            </div>
        </div>

        <script>
            const API_BASE = window.location.hostname;
            const API_PORT = '31326';
            const API_URL = `http://${API_BASE}:${API_PORT}`;
            
            const maxLengthSlider = document.getElementById('maxLength');
            const temperatureSlider = document.getElementById('temperature');
            const maxLengthValue = document.getElementById('maxLengthValue');
            const temperatureValue = document.getElementById('temperatureValue');
            
            maxLengthSlider.oninput = function() {
                maxLengthValue.textContent = this.value;
            }
            
            temperatureSlider.oninput = function() {
                temperatureValue.textContent = this.value;
            }
            
            function useQuickPrompt(prompt) {
                document.getElementById('promptInput').value = prompt;
                document.getElementById('promptInput').focus();
            }
            
            async function sendMessage() {
                const input = document.getElementById('promptInput');
                const chatContainer = document.getElementById('chatContainer');
                const sendBtn = document.getElementById('sendBtn');
                const status = document.getElementById('status');
                const prompt = input.value.trim();
                
                if (!prompt) return;
                
                addMessage(prompt, 'user');
                input.value = '';
                sendBtn.disabled = true;
                
                showTypingIndicator();
                
                try {
                    const response = await fetch(`${API_URL}/generate`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            prompt: prompt,
                            max_length: parseInt(maxLengthSlider.value),
                            temperature: parseFloat(temperatureSlider.value)
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`API returned ${response.status}`);
                    }
                    
                    const data = await response.json();
                    removeTypingIndicator();
                    addMessage(data.generated_text, 'bot');
                    
                    status.textContent = `✓ Generated in ${data.generation_time.toFixed(2)}s on ${data.device}`;
                    status.className = 'status success';
                    
                } catch (error) {
                    removeTypingIndicator();
                    addMessage('Sorry, I encountered an error. Please try again.', 'bot');
                    status.textContent = '✗ Error: ' + error.message;
                    status.className = 'status error';
                } finally {
                    sendBtn.disabled = false;
                }
            }
            
            function showTypingIndicator() {
                const chatContainer = document.getElementById('chatContainer');
                const typingDiv = document.createElement('div');
                typingDiv.className = 'message bot';
                typingDiv.id = 'typing-indicator';
                typingDiv.innerHTML = `
                    <div class="avatar">🦙</div>
                    <div class="typing-indicator">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                `;
                chatContainer.appendChild(typingDiv);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            function removeTypingIndicator() {
                const typingIndicator = document.getElementById('typing-indicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }
            
            function addMessage(text, sender) {
                const chatContainer = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}`;
                
                const avatar = document.createElement('div');
                avatar.className = 'avatar';
                avatar.textContent = sender === 'user' ? '👤' : '🦙';
                
                const content = document.createElement('div');
                content.className = 'message-content';
                content.textContent = text;
                
                messageDiv.appendChild(avatar);
                messageDiv.appendChild(content);
                
                chatContainer.appendChild(messageDiv);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            async function checkHealth() {
                try {
                    const response = await fetch(`${API_URL}/health`);
                    const data = await response.json();
                    document.getElementById('status').textContent = '✓ Connected to base model';
                    document.getElementById('status').className = 'status success';
                } catch (error) {
                    document.getElementById('status').textContent = '⚠ Waiting for API connection...';
                    document.getElementById('status').className = 'status error';
                }
            }
            
            checkHealth();
        </script>
    </body>
    </html>